/*
 * This source file was generated by the Gradle 'init' task
 */
package asu.cse565p4;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.junit.jupiter.api.Assertions.*;

@DisplayName("Vending Machine")
public class VendingMachineTest {

    public static final String EXPECTED_TRUE = "Item dispensed";
    public static final String EXPECTED_FALSE = "Item not dispensed";

    public static Boolean isTrue(String message) { return message.contains(EXPECTED_TRUE); }
    public static Boolean isFalse(String message) { return message.contains(EXPECTED_FALSE); }
    public static Integer getChange(String message) {
        Pattern pattern = Pattern.compile("(?:change of )?(\\d+)");
        Matcher matcher = pattern.matcher(message);
        if (matcher.find()) {
            return Integer.parseInt(matcher.group(1));
        }
        return 0;
    }
    public static Integer getMissing(String message) {
        Pattern pattern = Pattern.compile("(?:, missing )?(\\d+) cents");
        Matcher matcher = pattern.matcher(message);
        if (matcher.find()) {
            return Integer.parseInt(matcher.group(1));
        }
        return 0;
    }

    public enum PurchaseOption {
        CANNOT_PURCHASE,
        CAN_PURCHASE_CANDY_OR_COKE,
        CAN_PURCHASE_CANDY
    }

    public static PurchaseOption getOptions(String optionStr) {
        Map<String, PurchaseOption> optionsMap = new HashMap<>();
        optionsMap.put("Cannot purchase item", PurchaseOption.CANNOT_PURCHASE);
        optionsMap.put("Can purchase candy or coke", PurchaseOption.CAN_PURCHASE_CANDY_OR_COKE);
        optionsMap.put("Can purchase candy", PurchaseOption.CAN_PURCHASE_CANDY);

        for (Map.Entry<String, PurchaseOption> entry : optionsMap.entrySet()) {
            if (optionStr.contains(entry.getKey())) {
                return entry.getValue();
            }
        }

        throw new IllegalArgumentException("Unknown purchase option: " + optionStr);
    }

    @Test
    void testClass() {
        VendingMachine c = new VendingMachine();
        assertNotNull(c);
    }

    @Test
    void testInvalidItem() {
        String expected = "";
        String result = VendingMachine.dispenseItem(1000, "invalid");
        assertEquals(expected, result);
    }

    @Test
    void testDispenseItemCandyWithChange() {
        String result = VendingMachine.dispenseItem(30, "candy");
        assertTrue(isTrue(result));
        assertEquals(10, getChange(result));
    }

    @Test
    void testDispenseItemCandyNoChange() {
        String result = VendingMachine.dispenseItem(20, "candy");
        assertTrue(isTrue(result));
        assertEquals(0, getChange(result));
    }

    @Test
    void testNoDispenseItemCandy() {
        String result = VendingMachine.dispenseItem(15, "candy");
        assertTrue(isFalse(result));
        assertEquals(5, getMissing(result));
        assertEquals(PurchaseOption.CANNOT_PURCHASE, getOptions(result));
    }

    @Test
    void testDispenseItemCoke() {
        String result = VendingMachine.dispenseItem(35, "coke");
        assertTrue(isTrue(result));
        assertEquals(10, getChange(result));
    }

    @Test
    void testDispenseItemCokeNoChange() {
        String result = VendingMachine.dispenseItem(25, "coke");
        assertTrue(isTrue(result));
        assertEquals(0, getChange(result));
    }

    @Test
    void testNoDispenseItemCoke() {
        String result = VendingMachine.dispenseItem(20, "coke");
        assertTrue(isFalse(result));
        assertEquals(5, getMissing(result));
        assertEquals(PurchaseOption.CAN_PURCHASE_CANDY, getOptions(result));
    }

    @Test
    void testDispenseItemCoffee() {
        String result = VendingMachine.dispenseItem(55, "coffee");
        assertTrue(isTrue(result));
        assertEquals(10, getChange(result));
    }

    @Test
    void testDispenseItemCoffeeNoChange() {
        String result = VendingMachine.dispenseItem(45, "coffee");
        assertTrue(isTrue(result));
        assertEquals(0, getChange(result));
    }

    @Test
    void testNoDispenseItemCoffee() {
        String result = VendingMachine.dispenseItem(40, "coffee");
        assertTrue(isFalse(result));
        assertEquals(5, getMissing(result));
        assertEquals(PurchaseOption.CAN_PURCHASE_CANDY_OR_COKE, getOptions(result));
    }

    @Test
    public void testDispenseItemWithNegativeInputReturnsPositiveChange() {
        String result = VendingMachine.dispenseItem(-300, "");
        System.out.println(result);
        assertTrue(isFalse(result));
        assertEquals(-300, getChange(result));
    }
}